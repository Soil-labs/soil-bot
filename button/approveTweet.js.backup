const { ButtonInteraction, MessageMentions} = require("discord.js");
const sprintf = require('sprintf-js').sprintf;
const CONSTANT = require("../helper/const");
const { approveTweet, fetchProjectDetail } = require("../helper/graphql");
const { awaitWrap, validProject } = require("../helper/util");
require('dotenv').config();

module.exports = {
    customId: ["new_tweet_project_yes", "new_tweet_project_no"],
    /**
     * @param  {ButtonInteraction} interaction
     */
    async execute(interaction){
        const notificationChannelId = "988301791521308714";
        const guild = interaction.client.guilds.cache.get("988301790795685930");
        console.log(interaction.channel.type)
        const channel = interaction.channel;
        const content = interaction.message.content;
        const dbReg = new RegExp(`\\|\\|\\w{${CONSTANT.NUMERICAL_VALUE.DB_ID_LENGTH}}\\|\\|`, "g");
        const [projectId, tweetId] = content.match(dbReg).map(value => value.replace(/\|\|/g, ''));
        const projectName = validProject(projectId)?.title ?? "Unknown Name";
        
        let dmContent, channelContent, champion, championName, tweetUserId;

        //DM
        if (!channel){
            const championId = content.match(MessageMentions.USERS_PATTERN).map(value => value.match(/\d{17,19}/g)[0])[0]
            champion = guild.members.cache.get(championId)
            championName = champion.displayName;
            tweetUserId = content.match(/`\d{17,19}`/g)[0].replace(/`/g, '')
        }else{
            const matchResult = content.match(MessageMentions.USERS_PATTERN).map(value => value.match(/\d{17,19}/g)[0])
            const championId = matchResult[0];
            tweetUserId = matchResult[1];

            if (interaction.user.id != championId) return interaction.reply({
                content: "Sorry, you are allowed to approve or deny this tweet because you are not the champion of this project.",
                ephemeral: true
            })

            champion = interaction.guild.members.cache.get(championId);
            championName = champion.displayName;
        }
        const [ details, detailError ] = await fetchProjectDetail({ projectID: projectId });
        if (detailError) return interaction.reply({
            content: `Error occured when fetching project details: \`${detailError.response.errors[0].message}\``
        })

        const isDone = details.tweets.filter(value => value._id == tweetId && value.approved);
        if (isDone.length != 0) return interaction.reply({
            content: "Sorry, this tweet has been approved."
        })

        if (interaction.customId == this.customId[0]){
            console.log(projectId, tweetId)
            const [result, error] = await approveTweet({
                projectID: projectId,
                tweetId: tweetId,
                approved: true
            });
            if (error) return interaction.reply({
                content: `Error occured when approving this tweet: \`${error.response.errors[0].message}\``
            })
            dmContent = sprintf("Your update to \`%s\` has been approved by \`%s\`", projectName, championName);
            channelContent = sprintf("<@%s>, your update to \`%s\` has been approved by \`%s\`", tweetUserId, projectName, championName)
        }else{
            dmContent = sprintf("Your update to \`%s\` is not approved by \`%s\`", projectName, championName);
            channelContent = sprintf("<@%s>, your update to \`%s\` is not approved by \`%s\`", tweetUserId, projectName, championName)
        }

        const tweetUser = guild.members.cache.get(tweetUserId);

        if (!tweetUser) {
            return interaction.reply({
                content: "Your choice is well-received but I cannot find the tweet member in the guild.",
                ephemeral: true
            })
        }

        const dmChannel = await tweetUser.createDM();
        const {dmResult, dmError} = await awaitWrap(dmChannel.send({
            content: dmContent
        }), "dmResult", "dmError");

        if (dmError){
            const targetChannel = guild.channels.cache.get(notificationChannelId);
            targetChannel.send({
                content: channelContent
            })

            return interaction.reply({
                content: "Your choice is well-received. Notification has been sent through channel",
                ephemeral: true
            })
        }
        return interaction.reply({
            content: "Your choice is well-received. Notification has been sent through DM",
            ephemeral: true
        })
    }
   
}